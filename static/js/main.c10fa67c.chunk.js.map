{"version":3,"sources":["components/FutureValue.js","containers/App.js","serviceWorker.js","index.js"],"names":["FutureValue","state","initialAmount","years","monthlyPayment","interest","handleInitialAmountChange","e","target","value","setState","Number","handleInterestChange","handlePeriodChange","handleMonthlyPaymentChange","futureValue","this","i","toLocaleString","style","currency","className","htmlFor","id","type","onChange","pattern","step","calculate","Component","App","useEffect","document","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAqEeA,G,kNA/DXC,MAAQ,CACJC,cAAe,QACfC,MAAO,GACPC,eAAgB,QAChBC,SAAU,K,EAGdC,0BAA4B,SAACC,GACzBA,EAAEC,OAAOC,MAAQ,IAAYF,EAAEC,OAAOC,MAAQ,IAAY,EAAKC,SAAS,CAACR,cAAeS,OAAOJ,EAAEC,OAAOC,U,EAG5GG,qBAAuB,SAACL,GACpBA,EAAEC,OAAOC,MAAQ,IAAMF,EAAEC,OAAOC,MAAQ,IAAM,EAAKC,SAAS,CAACL,SAAUM,OAAOJ,EAAEC,OAAOC,U,EAG3FI,mBAAqB,SAACN,GAClBA,EAAEC,OAAOC,MAAQ,IAAMF,EAAEC,OAAOC,MAAQ,IAAM,EAAKC,SAAS,CAACP,MAAOQ,OAAOJ,EAAEC,OAAOC,U,EAGxFK,2BAA6B,SAACP,GAC1BA,EAAEC,OAAOC,MAAQ,IAAYF,EAAEC,OAAOC,MAAQ,IAAY,EAAKC,SAAS,CAACN,eAAgBO,OAAOJ,EAAEC,OAAOC,U,0DAMzG,IAFA,IAAIM,EAAcC,KAAKf,MAAMC,cAEpBe,EAAI,EAAGA,EAAuB,GAAnBD,KAAKf,MAAME,MAAYc,IACvCF,GAAeC,KAAKf,MAAMG,eAC1BW,GAA6BA,EAAcC,KAAKf,MAAMI,SAAW,IAGrE,OAAOU,EAAYG,eAAe,QAAS,CACvCC,MAAO,WACPC,SAAU,U,+BAKd,OACI,yBAAKC,UAAU,aACX,4DACA,4BACI,2BAAOC,QAAQ,kBAAf,oBACA,2BAAOC,GAAG,iBAAiBC,KAAK,SAASf,MAAOO,KAAKf,MAAMC,cAAeuB,SAAUT,KAAKV,6BAE7F,4BACI,2BAAOgB,QAAQ,gBAAf,6BACA,2BAAOC,GAAG,eAAeC,KAAK,SAASf,MAAOO,KAAKf,MAAME,MAAOsB,SAAUT,KAAKH,sBAEnF,4BACI,2BAAOS,QAAQ,YAAf,cACA,2BAAOC,GAAG,WAAWC,KAAK,SAASE,QAAQ,OAAMC,KAAK,OAAOlB,MAAOO,KAAKf,MAAMI,SAAUoB,SAAUT,KAAKJ,uBAA8B,+CAE1I,4BACI,2BAAOU,QAAQ,mBAAf,4BACA,2BAAOC,GAAG,kBAAkBC,KAAK,SAASf,MAAOO,KAAKf,MAAMG,eAAgBqB,SAAUT,KAAKF,8BAE/F,uCAAaE,KAAKY,kB,GA3DRC,c,MCaXC,MAZf,WAKE,OAJAC,qBAAU,WACRC,SAASC,MAAQ,iCAChB,IAGD,yBAAKZ,UAAU,OACb,kBAAC,EAAD,QCAca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFT,SAASU,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c10fa67c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './FutureValue.css';\r\n\r\nclass FutureValue extends Component {\r\n\r\n    state = {\r\n        initialAmount: 1000.25,\r\n        years: 18,\r\n        monthlyPayment: 1118.73,\r\n        interest: 1.1\r\n    }\r\n\r\n    handleInitialAmountChange = (e) => {\r\n        e.target.value > 100000000 ? e.target.value = 100000000 : this.setState({initialAmount: Number(e.target.value)});\r\n    }\r\n\r\n    handleInterestChange = (e) => {\r\n        e.target.value > 300 ? e.target.value = 300 : this.setState({interest: Number(e.target.value)});\r\n    }\r\n    \r\n    handlePeriodChange = (e) => {\r\n        e.target.value > 300 ? e.target.value = 300 : this.setState({years: Number(e.target.value)});\r\n    }\r\n\r\n    handleMonthlyPaymentChange = (e) =>{\r\n        e.target.value > 100000000 ? e.target.value = 100000000 : this.setState({monthlyPayment: Number(e.target.value)});\r\n    }\r\n\r\n    calculate() {\r\n        let futureValue = this.state.initialAmount;\r\n        \r\n        for (let i = 0; i < this.state.years * 12; i++) {\r\n            futureValue += this.state.monthlyPayment;\r\n            futureValue = futureValue + (futureValue * this.state.interest / 100);\r\n        }\r\n\r\n        return futureValue.toLocaleString('en-US', {\r\n            style: 'currency',\r\n            currency: 'USD',\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <h1>Compound Interest Simulation</h1>\r\n                <ul>\r\n                    <label htmlFor=\"initial-amount\">Initial amount: </label>\r\n                    <input id=\"initial-amount\" type=\"number\" value={this.state.initialAmount} onChange={this.handleInitialAmountChange}></input>\r\n                </ul>\r\n                <ul>\r\n                    <label htmlFor=\"years-period\">Investment time (years): </label>\r\n                    <input id=\"years-period\" type=\"number\" value={this.state.years} onChange={this.handlePeriodChange}></input>\r\n                </ul>\r\n                <ul>\r\n                    <label htmlFor=\"interest\">Interest: </label>\r\n                    <input id=\"interest\" type=\"number\" pattern=\"\\d+\" step=\"0.01\" value={this.state.interest} onChange={this.handleInterestChange}></input><span> % per month</span>\r\n                </ul>\r\n                <ul>\r\n                    <label htmlFor=\"monthly-payment\">Monthly payment amount: </label>\r\n                    <input id=\"monthly-payment\" type=\"number\" value={this.state.monthlyPayment} onChange={this.handleMonthlyPaymentChange}></input>\r\n                </ul>\r\n                <h3>Result: {this.calculate()}</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FutureValue;","import React, { useEffect } from 'react';\n\nimport FutureValue from '../components/FutureValue';\nimport './App.css';\n\nfunction App() {\n  useEffect(() => {\n    document.title = \"Compound Interest Simulation\"\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <FutureValue />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}